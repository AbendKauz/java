- 중첩 클래스와 중첩 인터페이스

	- 중첩 클래스(nested class)
		- 클래스 내부에 선언한 클래스
		-- 두 클래스의 멤버들을 서로 쉽게 접근하게 하고, 외부에는 불필요한 관계 클래스를 감춤
			=> 코드의 복잡성을 줄임
	ex)
	class ClassName {
		class NestedClassName{ ┐
		                       ├ 중첩 클래스
		}                      ┘
	}
	
	- 중첩 인터페이스(nested class)
		- 클래스 내부에 선언한 인터페이스
		-- 해당 클래스와 긴밀한 관계를 갖는 구현 클래스를 만들기 위함
	ex)
	class ClassName {
		interface NestedInterfaceName{ ┐
		                               ├ 중첩 인터페이스
		}                              ┘
	}
	
	- 멤버 클래스
		- 클래스의 멤버로서 선언되는 중첩 클래스
		-- 클래스나 객체가 사용 중이면 언제든지 재사용이 가능
		
	- 로컬 클래스
		- 생성자 또는 메소드 내부에서 선언되는 중첩 클래스
		-- 메소드가 실행될 때만 사용되고 메소드가 종료되면 사라짐
	
	- 인스턴스 멤버 클래스
		- static 키워드 없이 중첩 선언된 클래스
		-- 인스턴스 필드와 메소드만 선언 가능하고 정적 필드와 메소드는 선언불가
	
	- 정적 멤버 클래스
		- static 키워드로 선언된 클래스
		-- 모든 종류의 필드와 메소드 선언 가능
	
	- 로컬 클래스
		- 메소드 내에서 선언한 중첩클래스
		-- 접근제한자 및 static을 붙일 수 없음
			=> 메소드 내부에서만 사용되므로 접근제한을 할 필요가 없음
		-- 인스턴스 필드와 메소드만 선언할 수 있고
			정적 필드와 메소드는 선언 불가
	
	* 중첩 클래스의 장점
		1. 클래스를 논리적으로 묶을 수 있음
		2. 캡슐화(보안) 효과를 증대시켜줌
		3. 코드 가독성 및 유지보수가 용이함 ★★★
	
	- 중첩클래스의 접근제한
		- 바깥 필드와 메소드에서의 사용제한
		- 멤버 클래스에서의 사용제한
		- 로컬 클래스에서의 사용제한
	
	