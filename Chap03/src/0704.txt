* 논리 연산자
	- boolean 타입만 사용 가능

	● AND	(논리곱)			-> 피연산자 모두가 true일 경우에만 true
ex)	a & b, a && b
		-> 앞의 피연산자가 false면 연산종료
		
	● OR	(논리합)			-> 피연산자 중 하나라도 true일 경우 true
ex)	a | b, a || b
		-> 앞의 피연산자가 true면 연산종료
		
	● XOR	(배타적 논리합)	-> 피연산자가 하나는 true이고 다른 하나는 false일 경우 true)
ex)	a ^ b

	● NOT	(논리부정)		-> 피연산자의 논리값을 변경(true->false, false->true)
ex)	a ! b
	
	
* 대입 연산자
	- 오른쪽 피연산자의 값을 왼쪽 피연산자인 변수에 저장
ex)	변수 연산식 피연산자
	 a    =     b
	 
	● =	: 오른쪽의 피연산자의 값을 왼쪽 변수에 저장 
ex)	int x = 14;

	● +=	: 변수 = 변수 + 피연산자
ex) x += 10		=> x = x + 10	= 24

	● -=	: 변수 = 변수 - 피연산자
ex) x -= 2;		=> x = x - 2	= 12

	● *=	: 변수 = 변수 * 피연산자
ex) x *= 10;	=> x = x * 10	= 140

	● /=	: 변수 = 변수 / 피연산자
ex) x /= 7;		=> x = x / 7	= 2

	● %=	: 변수 = 변수 % 피연산자
ex) x % 3		=> x = x % 3	= 2

	● &=	: 변수 = 변수 & 피연산자
	● |=	: 변수 = 변수 | 피연산자
	● ^=	: 변수 = 변수 ^ 피연산자
	
- 삼항 연산자	: 3개의 피연산자를 필요로 하는 연산자
	--> ? 앞의 조건식에 따라 콜론(:) 앞뒤의 피연산자 선택
ex) 	조건식		?		값 또는 연산식		:		값 또는 연산식
	  (피연산자1)              (피연산자2)               (피연산자3)
	      ┗---------true---------┛
	  ┗---------------------false---------------------------┛
	  
ex) int score = 95;										int score = 95;
	char grade = (score > 90) ? 'A' : 'B'		=>		char grade;
														if(score > 90){
															grade = 'A';
														}else {
															grade = 'B';
														}
	  

	