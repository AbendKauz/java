- 필드(field)(멤버변수 or 전역변수)
	- 객체의 데이터가 저장되는 곳
		-- 고유데이터, 부품객체, 상태정보가 저장됨
		
	class{
		┌─────────────────────────────┐
		| 필드(Field) - 멤버변수, 전역변수 |
		| ┌──────────────────┐        |
		| | 생성자 {...}   　  |        |
		| |   지역변수         |        |
		| └──────────────────┘        |
		|                             |
		| ┌─────────────────┐         |
		| |메소드 {...}    　 |         |
		| |   지역변수        |         |
		| └─────────────────┘         |
		|                             |
		└─────────────────────────────┘
	}

	- 선언위치에 따라 필드와 변수 구분
		- 변수 : 생성자 또는 메소드의 블록내부에서 정의
		
		- 필드 : 클래스 중괄호 내부
				-> + 생성자, 메소드 중괄호 밖에서 정의
				=> 멤버변수, 전역변수
	
	- 필드 사용
		- 필드값 읽고 변경하는 작업
		- 클래스 내부 생성자 및 메소드에서 사용하는 경우 : 필드 이름으로 읽고 변경
		- 클래스 외부에서 사용하는 경우 : 클래스로부터 객체 생성 후 필드 사용
		
		
- 메소드(method)
	- 메소드 선언부(signature)
		- 리턴타입
		- 메소드 이름
		- 매개변수 선언
		
		[형태]		
	리턴타입 메소드이름([매개변수선언,...]) {
		실행할 코드를 작성하는 곳	
	}

	- main()메소드
		- java 응용프로그램의 실행이 시작되는 특별한 메소드

	- 메소드 이름
		- 숫자로 시작하면 안됨
		- $와 _ 제외한 특수문자 사용 불가
		- 메소드이름은 관례적으로 소문자로 작성
		- 서로 다른 단어가 혼합된 이름일 경우 뒤이어 오는 단어의 첫글자는 대문자로

	- 매개변수 선언
		- 메소드 실행에 필요한 데이터를 외부에서 받아 저장할 목적
		
	- 리턴값이 있는 메소드
		- return문의 리턴값은 리턴타입이거나 리턴타입으로 변환될 수 있어야 함
	
	- 리턴값이 없는 메소드
		-> void 타입으로 사용
		-> void로 선언된 메소드에서 return문 사용시 -> 메소드 실행 강제종료
	
	
** 메소드 오버로딩(overloading)
	- 정의 : 한 클래스내에 이미 사용하려는 이름과 같은 이름을 가진 메소드가 있더라도
		매개변수의 개수 또는 타입이 다르면, 같은 이름을 사용해서 메소드를 정의할 수 있다
	- 같은 이름의 메소드를 여러개 선언
	- 매개값을 다양하게 받아 처리할 수 있도록 하기 위함
		-> 매개변수의 타입, 갯수, 순서 중 하나라도 달라야 함
	- ex) println()


