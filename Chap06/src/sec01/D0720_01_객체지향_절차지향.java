package sec01;

public class D0720_01_객체지향_절차지향 {

	public static void main(String[] args) {

		// 절차지향 프로그래밍
		// 정의 : 문제를 해결하는 절차를 중요하게 하는 기법 (C언어)
		// -> 서로 분리되어도 안되고, 순서가 틀려도 안됨
		// 장점 : 실행속도가 빠름(컴퓨터의 처리구조와 비슷함)
		// 단점 : 유지보수, 디버깅(프로그램의 문제를 찾아 해결하고 고치는 과정)이 어려움
		// 엄격하게 순서가 정해져있어 비효율적 // 대규모 프로젝트에 부적합 (소규모 프로젝트에서 사용)

		// 객체지향 프로그래밍
		// -> 절차지향의 단점을 보완하기 위해 등장 // 현재 가장 많이 사용되는 대표적인 프로그래밍 방법
		// 정의 : 객체를 만들고 이를 조립해 완성된 프로그램을 만드는 기법 (java, 파이썬 등등)
		// 장점 : 코드 재사용이 용이
		// 유지보수가 쉬움
		// 대규모 프로젝트에 적합
		// 여러 개발자와 협업 진행이 용이
		// 단점 : 처리속도가 상대적으로 느림
		// 객체가 많을수록 용량이 커짐
		// 설계시 많은 시간, 노력이 필요

		// 객체란
		// -> 우리 주변에 있는 모든 것이 객체(ex. 자동차, 사람, 컴퓨터 등등)
		// -> 물리적으로 존재하거나 추상적으로 생각할 수 있는 것 중에서
		// 자신의 속성을 가지며 식별 가능한 것
		// 실세계의 객체들은 자신만의 고유한 속성(field), 동작(method)를 가짐
		// ex) 강아지 -> 속성(데이터) = field : 품종, 이름, 색상, 무게, 나이 등
		// -> 동작(기능) = method : 먹는다, 짖는다, 잔다, 걷는다 등
		// -> 이런식으로 객체를 공통된 속성과 행위를 추출하는 기법(추상화)

		// 객체지향의 특성(4가지)
		// 1. 캡슐화 : 데이터, 알고리즘을 하나로 묶어 보호하는 것
		// 정보은닉(실제 구현 내용을 외부로부터 감추는 기법)
		// -> 외부로부터 객체가 손상되지 않도록 내부를 보호
		// 2. 상속 : 자식클래스가 부모클래스의 속성(field, method)를 물려받음 // (7-1)
		// -> 코드의 중복성이 줄어듬 // 시간과 비용 절약(유지보수때 포함)
		// 3. 추상화 : 객체를 공통된 속성과 행위를 추출하는 기법
		// 4. 다형성 : 다양한 형태로 나타날 수 있는 능력
		// ex) 같은 이름의 method를 호출하더라도 객체에 따라 다르게 작동
		// - 오버라이딩, 오버로딩 // method(6-4)

	}

}
