- 객체(Object)
	- 물리적으로 존재하거나 추상적으로 생각할 수 있는 것 중에서 
		자신의 속성을 가지며 식별 가능한 것
	- 속성(field) + 동작(method)으로 구성
	-- 객체 모델링
		- 현실세계의 객체를 소프트웨어 객체로 설계하는 것
			(현실세계 객체의 속성과 동작을 추려내어 소프트웨어 객체의
			필드와 메소드로 정의하는 과정)
		
	* 절차 지향 프로그래밍
		- 문제를 해결하는 절차를 중요하게 생각하는 방법
		
		-- 절차 지향 프로그래밍에 쓰이는 언어 : 절차 지향 언어 (ex : C언어)
	 		: 서로 분리되어도 안되고, 순서가 틀려도 안됨
	 
	 	- 절차지향언어의 장점
	 		- 초기 프로그래밍 언어로, 컴퓨터의 처리 구조와 비슷해
	 			실행 속도가 빠름
	 			
	 	- 절차지향언어의 단점
	 		- 유지보수, 디버깅이 어렵다
	 		- 코드를 분석하기 어렵다
	 		- 정해진 순서대로 코드를 작성해야 하므로 비효율적
	 		- 대규모 프로젝트에 부적합
	 
	* 객체 지향 프로그래밍(OOP : Object Oriented Programming)
		- 객체를 만들고 이를 조립해 완성된 프로그램을 만드는 기법
		- 절차 지향 프로그래밍의 단점을 보완하기 위해 등장
		
		-- 객체 지향 프로그래밍에 쓰이는 언어 : 객체 지향 언어 (ex : java, C++, 파이썬 등)
		
		-- 객체 지향 프로그래밍의 특징
			* 캡슐화
				- 데이터와 알고리즘을 하나로 묶어 하나의 캡슐처럼 만드는 것
				- 외부에서는 공개된 method를 통해 접근 가능
				-- 장점 : 실제 구현 내용을 외부로부터 감추는 기법(정보은닉)
					-> 외부의 잘못된 사용으로 인해 객체가 손상되지 않도록
						캡슐화를 통해 내부를 보호
			* 상속
				- 자식(하위)class가 부모(상위)class의 속성(field, method)을 물려받음
				- 이미 작성된 class(상위)의 특성을 그대로 이어받아 새로운 class(하위)를 생성하는 기법
				-- 장점 : 중복되는 속성과 기능을 반복하지 않고 재사용
					-> 시간과 비용을 줄임
					(코드의 중복이 많아지면 개발단계와 유지보수에서 많은 비용이 소모됨)
			* 추상화
				- 객체에서 공통된 속성과 행위를 추출하는 기법
				- 실제 존재하는 객체들을 프로그램으로 만들기 위해 공통적인 특성을 파악,
					불필요한 특성을 제거하는 과정
			* 다형성
				- 사전적 의미 : 다양한 형태로 나타날 수 있는 능력을 의미
				- 같은 이름의 method를 호출하더라도 객체에 따라 다르게 동작하는 것
				
	*** 오버라이딩, Overriding
		- 상위class의 동작을 하위class에서 다시 정의하는 것
		
	*** 오버로딩(Overloading)
		- 하나의 class내에서 이름은 같지만 서로 다르게 동작하는 method를 여러개 만드는 것
	
	- 객체와 객체간의 상호작용
		- method를 통해 객체들이 상호작용
		-- method 호출 : 객체가 다른 객체의 기능을 이용하는 것
	 
	- 객체간의 관계
		- 집합관계
			- 부품과 완성품의 관계
		- 사용관계
			- 객체간의 상호작용
		- 상속관계
			- 상위(부모)객체를 기반으로 하위(자식)객체를 생성
	 
	- 객체 지향 프로그래밍
		- 집합/사용 관계에 있는 객체를 하나씩 설계한 후 조립하여 프로그램 개발
	 
	
- 클래스(class)
	- java의 설계도
	-- 인스턴스(instance) : class로부터 만들어진 객체
	
	- 객체지향 프로그래밍 단계
		- class설계 -> 설계된 class로 사용할 객체 생성 -> 객체 이용


	- class 선언
		- 객체 구상 후 class 이름을 결정
			- 식별자 작성 규칙에 따라야 함
				- 하나 이상의 문자로 이루어질 것
				- 첫 글자에는 숫자 올 수 없음
				- $, _외의 특수문자 사용불가
				- java 키워드는 사용불가
				
				
	- class로부터 객체 생성
		- new class();
		- new연산자로 메모리 힙 영역에 객체 생성
		- 객체 생성 후 객체 번지가 return
			-- class변수에 저장하여 변수를 통해 객체 사용 가능
		
	-- class의 두 용도
		- 라이브러리(API : Application Program Interface) class
			- 다른 class에서 이용할 목적으로 설계
		- 실행 class	
			- main() method 제공 역할
			
	- class member
		- 필드(field)
			- 객체의 데이터가 저장되는 곳
		- 생성자(Constructor)
			- 객체 생성 시 초기화 역할 담당
		- 메소드(method)
			- 객체의 동작에 해당하는 실행 블록

