- 메소드(method)
	- 어떤 작업을 수행하기 위한 명령문의 집합
		-- 어떤 값을 입력(입력값)받아 어떤 일을 수행한 다음, 결과(리턴값)를 반환
		
	- 메소드 사용의 장점
		- 소스코드의 가독성
		- 소스코드의 재사용성
		- 유지보수의 편리성
		
	- 메소드 선언부(signature)
		- 리턴 타입
		- 메소드 이름
		- 매개변수 선언
	
	- 메소드 실행 블록
		- 실행할 코드 작성
  (형태)
	리턴타입 메소드 이름([매개변수선언, ...]){
		실행할 코드 작성하는 곳
	}
	
	- 메소드 대표적인 예
		- main() 메소드
			- 자바 응용프로그램의 실행이 시작되는 특별한 메소드
			
	public static void main(String[] args){
	------ ------ ---- ----
   접근제한자 정적멤버  ↓    ↓
                 리턴타입 메소드이름	
	}
	
	- 리턴 타입
		- 메소드를 실행한 후의 결과값의 타입
		- 리턴값이 없을 수도 있음
		- 리턴값이 있는 경우 리턴타입이 선언부에 명시되어야 함
		- 리턴값의 존재 여부에 따라 메소드 호출 방법이 다름
		-- 리턴값과 리턴값을 저장할 변수의 타입이 다르면 컴파일 에러 발생
	
	- 메소드 이름
		- 숫자로 시작하면 안됨
		- $와 _ 제외한 특수문자 사용 불가
		- 메소드 이름은 관례적으로 소문자로 작성
		- 서로 다른 단어가 혼합된 이름일 경우 뒤이어 오는 단어의 첫 글자를 대문자로 작성
		- 메소드가 어떤 기능을 수행하는지 쉽게 알 수 있도록 기능 이름으로 지어주는 것이 좋음
		- 메소드 이름의 길이는 프로그램 실행과는 무관하나, 너무 짧게 주지 않도록 함
	
	- 매개변수 선언
		- 메소드 실행에 필요한 데이터를 외부에서 받아 저장할 목적
		- 잘못된 매개값을 사용하면 컴파일 에러 발생
		- 매개값의 타입과 매개변수의 타입이 달라도 int타입으로 변환될 수 있는 값이면 가능함
	
	
	-- 매개변수의 갯수를 모를 경우
		- 1. 매개변수를 배열 타입으로 선언
			ex)	int sum1(int[] values){}
		- 2. 배열 생성하지 않고 값의 목록만 넘겨주는 방식
			ex) int sum2(int ... values){}
	
	- 리턴값이 있는 메소드
		- 메소드 선언에 리턴 타입이 있는 메소드는 리턴문 사용하여 리턴값 지정
			ex) return 리턴값;
		- return문의 리턴값은 리턴타입이거나 리턴타입으로 변환될 수 있어야 함
			ex) int plus(int x, int y){
					byte result = (byte)(x + y);
					return result;
				}
				
	- 리턴값이 없는 메소드
		- 메소드 선언에 리턴 타입이 없는 메소드는 void타입으로 선언
		- void로 선언된 메소드에서도 return문 사용 가능
			-- 리턴값을 지정하는것이 아니라 메소드 실행을 강제 종료시키는 역할
	
	
	
	