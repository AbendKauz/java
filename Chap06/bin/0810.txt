	- 객체 내부에서 호출
		- 메소드가 리턴값이 없거나(void) 있어도 받고 싶지 않은 경우
			-> 메소드( 매개값, ... );
		- 리턴값이 있는 메소드를 호출하고 리턴값을 받고 싶은 경우
			-> 타입변수 = 메소드(매개값, ...);
	- 메소드 오버로딩(overloading)
		- 같은 이름의 메소드를 여러 개 선언
		- 매개값을 다양하게 받아 처리할 수 있도록 하기 위함
		- 매개변수의 타입, 개수, 순서 중 하나가 달라야 함
		--> 오버로딩된 메소드를 호출하는 경우 JVM은 매개값의 타입을 보고 메소드를 선택
		* 매개변수의 타입, 개수, 순서가 같은 경우 매개변수의 이름이 달라도 메소드 오버로딩이 아님에 주의
		
	
- 인스턴스 멤버
	- 객체마다 가지고 있는 멤버(객체를 생성한 후 사용할 수 있는 필드와 메소드)
		- 인스턴스 필드
			- 힙 영역의 객체마다 가지고 있는 멤버, 객체마다 다른 데이터를 저장
		- 인스턴스 메소드
			- 객체가 있어야 호출 가능한 메소드
			-- 클래스코드(메소드 영역)
	- this
		- 객체 내에서 인스턴스 멤버에 접근하기 위해 사용
		- 생성자와 메소드의 매개변수 이름이 필드와 동일할 경우, 필드임을 지정하기 위해 주로 사용
	
	- 정적(static) 멤버
		- 클래스에 고정된 멤버
		-- 객체를 생성하지 않고 사용할 수 있는 필드와 메소드
	
               바이트 코드 로딩
    클래스 로더 ----------------> 메소드 영역
       ↑
       | 바이트 코드 읽기
       |
	 클래스
	 
	 	- 정적 멤버 사용
	 		- 클래스 이름과 함께 도트 연산자로 접근
	 
	- 인스턴스 멤버와 정적 멤버 선언 기준
		- 객체마다 가지고 있어야 할 데이터라면 -> 인스턴스 필드로 선언
		- 객체마다 가지고 있을 필요가 없는 공용데이터라면 -> 정적 필드로 선언
		
		- 메소드 블록에 인스턴스 필드를 사용할 경우 -> 인스턴스 메소드로 선언
		- 그렇지 않을 경우 -> 정적 메소드로 선언
	
	- 정적 메소드 선언 시 주의할 점
		- 정적 메소드
		
	 
	 
	 
	 
	