package exam01;

public class D0919_네트워크_이론 {

	public static void main(String[] args) {

		// TCP/IP 프로토콜
		// : 데이터가 의도된 목적지로 전송할 수 있도록 보장해주는 하나의 약속
		// * 프로토콜 : 통신규약 -> 여러 컴퓨터나 단말기 사이에서
		// 데이터 통신을 원활하게 하기 위해 필요한 통신규약
		// 통신규약은 통신을 하기 위한 약속이라고 이해하면 됨

		// TCP (Transmission Control Protocol)
		// : 다른 두 시스템 간에 신뢰성 있는 데이터의 전송을 관장하는 통신 프로토콜
		// => 정보 전달을 안전하게 할 수 있도록 하는 규약을 의미
		// : TCP 프로토콜을 사용하는 응용프로그램 => e-mail, web 등

		// IP (Internet Protocol)
		// : 송신 호스트와 수신 호스트가 데이터를 주고받는것을 권장하는 프로토콜
		// => 데이터의 조각을 최대한 빨리 대상 IP로 보내는 역할

		// * 내 컴퓨터의 IP주소 확인하기
		// : 윈도우 클릭 -> cmd -> ipconfig 입력 (IPv4 번호)

		// * 포트
		// : IP주소는 네트워크 상에 있는 한 컴퓨터를 유일하게 식별한다.
		// 하지만, 한 컴퓨터에는 여러 응용프로그램이 네트워크를 사용하고 있기 때문에,
		// IP주소만을 가지고는 통신하고자 하는 응용프로그램을 식별할 수 없음

		// => 이를 위해 한 컴퓨터 내의 각 응용프로그램은 통신을 위해 가상의 연결단인 포트를 생성하고,
		// 이 포트 번호로 상대방이 자신을 식별하도록 함

		// : 포트번호는 응용프로그램 개발자가 임의로 선택하여 사용할 수 있으나,
		// 기존 응용프로그램에서 사용하고 있는 포트번호나 시스템의 포트번호는 제외해야 함

		// * 소켓 -> 구멍, 콘센트 등의 의미를 가짐
		// : 네트워크 상에서 수행되는 두 프로그램간의 양방향 통신링크의 한쪽 끝단으로서,
		// TCP/IP 기능을 활용하여 다른 컴퓨터의 소켓과 데이터를 주고받음
		// : 소켓은 특정 포트에 연결이 되어 데이터를 보내거나 받을 때 해당 프로그램을 식별하는 역할
		// => 프로그램이 네트워크에서 데이터를 통신할 수 있도록 연결해주는 연결부

		// * 소켓 종류 (통신연결 요청을 보냈는지, 요청을 받았는지에 따라)
		// 1. 서버 소켓(통신연결 요청을 받음)
		// : 말 그대로 서버 프로그램에서만 사용하는 소켓
		// : 클라이언트로부터 연결 요청이 오기까지 기다렸다가, 연결 요청이 들어오면
		// 클라이언트와 연결을 맺고 다른 소켓을 만드는 역할

		// 2. 클라이언트 소켓(통신연결 요청을 보냄)
		// : 클라이언트 프로그램에서 클라이언트 소켓은 서버프로그램으로 연결요청을 하는 것과
		// 데이터 전송을 하는 역할

	}

}
