- 네트워크(Network)
	- TCP / IP
		* TCP(Transmission Control Protocol)
		: 두 시스템 간에 신뢰성 있는 데이터의 전송을 관장하는 포로토콜
		(e-mail, FTP, 웹(HTTP) 등)
		* IP(Internet Protocol)
		: 패킷 교환 네트워크에서 송신 호스트와 수신 호스트가 
		데이터를 주고 받는 것을 관장하는 프로토콜
			=> TCP보다 하위 레벨 프로토콜
	
	- IP주소
		: 네트워크 상에서 유일하게 식별될 수 있는 컴퓨터 주소
		=> 현재는 32비트의 IP버전4(IPv4)가 사용되고 있음
			-> IP주소 고갈로 128비트의 IP버전6(IPv6)이 점점 사용되는 추세
		- 숫자로 된 주소는 기억하기 어려우므로 www.naver.com과 같은 문자열로
			구성된 도메인 이름으로 바꿔 사용함
		* DNS(Domain Name Server)
			: 문자열로 구성된 도메인 이름을 숫자로 구성된 IP주소로 자동변환

	- 포트(ports)
		: 통신하는 프로그램간에 가상의 연결단인 포트를 생성
			* IP주소는 네트워크 상의 컴퓨터 또는 시스템을 식별하는 주소
			* 포트번호를 이용하여 통신할 응용프로그램 식별
		- 모든 응용프로그램은 하나 이상의 포트 생성 가능
			* 포트를 이용하여 상대방 응용프로그램과 데이터 교환
		- 잘 알려진 포트(well-know ports)
			* 시스템이 사용하는 포트번호
			* 잘 알려진 응용프로그램에서 사용하는 포트번호
			(ex. 0부터 1023 사이의 포트 번호 : HTTP 80, FTP 21)
			** 잘 알려진 포트번호는 개발자가 사용하지 않는 것이 좋음
				(충돌 가능성 있음)

	- URL(Uniform Resource Locator)
		: 인터넷 상의 리소스에 대한 주소
	[구조]
	http://www.naver.com
	----   -------------
	 |          ↓
     ↓  자원이름(resource name)
 프로토콜식별자(protocol identifier)


	- 소켓(socket)
		: 네트워크 상에서 수행되는 두 프로그램 간의 양방향 통신링크의 한쪽 끝 단을 의미
		* 소켓은 특정 포트번호와 연결되어 있음
			(TCP에서 데이터를 보낼 응용프로그램을 식별할 수 있음)
		* 자바에서의 데이터 통신 시 소켓 사용
		* 소켓 종류 : 서버소켓, 클라이언트 소켓

		- 서버 소켓 : 클라이언트의 접속을 기다리는 소켓
			: 클라이언트가 접속해오면, 클라이언트 소켓을 추가로 만들어 상대 클라이언트와 통신함
			-> 서버 응용프로그램이 사용자의 접속을 기다리는 목적으로 사용
		
		- 클라이언트 소켓 : 데이터 통신을 실시하는 소켓
			: 클라이언트 응용프로그램에서는 클라이언트 소켓을 이용하여 서버에 접속함


		- Socket 클래스(java.net 패키지에 포함됨)
			: 클라이언트 소켓에 사용되는 클래스
	[주요 생성자]
	생성자									설명
	Socket(InetAddress address, int port)	소켓을 생성하여 지정된 IP주소와 포트번호에 연결
	Socket(String host, int port)			소켓을 생성하여 지정된 호스트와 포트번호에 연결

		- ServerSocket 클래스(java.net 패키지에 포함됨)
			: 서버 소켓에 사용되는 클래스
	[주요 생성자]
	생성자					설명
	ServerSocket(int port)	소켓을 생성하여 지정된 포트번호에 연결

	
	* 사용중인 소켓 확인 : cmd -> netstat -ano
	* 소켓 강제 종료 : taskkill /f /pid PID번호
	