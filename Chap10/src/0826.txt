- 예외처리(Exception)
	- 사용자의 잘못된 조작 또는 개발자의 잘못된 코딩으로 인해 발생하는 프로그램 오류
	-- 예외 처리 프로그램을 통해 정상 실행 상태 유지 가능
	[기본형]
	try{
		// 예외발생 가능성이 있는 코드
	}catch (예외클래스 e){
		// 예외 처리
	}
	
	- 예외의 종류
		- 일반예외(exception)
			- 컴파일러 체크 예외
			-- 자바 소스 컴파일 과정에서 해당 예외처리코드가 있는지 검사하게 됨
		- 실행예외(runtime exception)
			- 컴파일러 넌 체크 예외
			-- 실행 시 예측할 수 없이 갑자기 발생하기에 컴파일 과정에서 예외처리코드를 검사하지 않음
	
	- NullPointerException
		- 객체 참조가 없는 상태(null값)에서 발생
		* 가장 빈번하게 발생하는 예외
		-> null 대신 공백으로 처리하면 발생 안함
	
	- ArrayIndexOutOfBoundsException
		- 배열에서 인덱스 범위를 초과할 경우 발생
	
	- NumberFormatException
		- 문자열을 숫자로 변환하는 경우 변환되지 않는 문자열이면 발생
	
	- ClassCastException
		- 상위클래스와 하위클래스, 구현 클래스와 인터페이스 간 타입변환가능
		-- 위 관계가 아닌 경우 발생
		-> instanceof 연산자로 확인하면 발생 안함
	
	
	- 예외 처리
		- 자바 컴파일러는 소스 파일 컴파일 시 일반 예외 발생할 가능성이 있는 코드를 발견하면
			컴파일 에러를 발생시켜 개발자에게 예외 처리 코드 작성을 요구
		- 실행 예외의 경우 컴파일러가 체크하지 않으므로 개발자가 경험을 바탕으로 작성해야 함
	
	[기본형]
	try{
		// 예외발생 가능성이 있는 코드
	}catch (예외클래스 e){
		// 예외 처리
	}finally{
		// 항상 실행되는 코드
	}
	
	- 다중 예외처리
		- 발생하는 예외별로 예외 처리 코드를 다르게 하는 다중 catch블록
		- catch 블록의 예외 클래스 타입은 try 블록에서 발생된 예외의 종류를 말함
		- try블록에서 해당 타입 예외가 발생하면 catch블록을 실행
	
	- catch 순서
		- 다중 catch블록 작성 시 상위 예외 클래스가 하위 예외 클래스보다 아래에 위치해야 함
	