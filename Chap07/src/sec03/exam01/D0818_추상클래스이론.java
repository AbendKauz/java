package sec03.exam01;

public class D0818_추상클래스이론 {

	public static void main(String[] args) {

		// 추상 => 사전적의미 : 실체간에 공통되는 특성을 추출한 것
		// ex) 새, 곤충, 물고기 등의 실체에서 공통된 특성 -> 동물(추상적인 것)

		// 클래스에서도 추상 클래스 라는 것이 존재를 함

		// * 추상 클래스
		// - 실체 클래스 : 객체를 직접 생성할 수 있는 클래스
		// ==> 실체 클래스들의 공통적인 특성을 추출해서 선언해둔 클래스를
		// << 추상클래스 >> 라고 함
		// - 일반적으로는 추상 클래스를 먼저 만들고, 추상 클래스를 상속받는 실체 클래스를 만듬
		// (실체 클래스의 공통될 특성들을 미리 에측해서 추상클래스를 만듬)

		// * 즉, 실체 클래스를 만들기 위한 규격 -> 추상 클래스로 만든다
		// (설계 규격을 미리 정해둠)

		// - 추상 클래스와 실체 클래스는 상속관계를 가짐
		// => 실체 클래스에서는 추상 클래스의 공통적인 특성을 물려받고,
		// 추가적인 특성을 가질 수 있음

		// * 추상 클래스의 용도
		// -> 공통된 필드와 메소드의 이름을 통일할 목적
		// (개발자가 여러 사람일 경우, 같은 기능을 가지는 필드와 메소드를
		// 다른 이름으로 만들 수 있음 -> 사용방법도 다르기 때문에 불편)
		// -> 실체 클래스를 작성할 때 시간적으로 절약
		// : 미리 공통된 특성들은 추상 클래스에 코드를 작성
		// -> 추가로 필요한 코드만 더 작성하면 되니 시간 절약이 됨

		// * 추상클래스 선언
		// -> 클래스 선언 앞에 abstract 키워드를 붙임
		// 접근제한자 abstract class 클래스명 { }

		// -> 추상클래스는 반드시 상속을 통해서 사용해야함
		// (자식클래스를 만들 수 있게 부모로서의 역할만 수행)
		// new 연산자를 이용해서 직접적으로 객체를 생성하지는 못함(new 클래스명(); -> X)

		// -> 추상 클래스도 필드, 생성자, 메소드를 선언할 수 있음
		// : new 연산자로 직접 생성자를 호출할 수는 없지만,
		// -> 자식객체가 생성될 때, 부모클래스의 객체도 만들어지게 됨
		// 객체로 만들어지려면 반드시 생성자 호출이 있어야 하므로
		// 자식 생성자에서 super(...)의 형태로 추상클래스의 생성자를 호출함

	}

}
