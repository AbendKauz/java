package sec01.exam01;

public class D0831_멀티스레드이론 {

	public static void main(String[] args) {

		// * 프로세스 와 스레드
		// - 프로세스
		// : 단순히 실행중인 프로그램
		// : 애플리케이션을 실행하면 운영체제로부터 실행에 필요한 메모리를 할당받아
		// 애플리케이션이 실행되는 것을 말함

		// - 스레드
		// : 프로세스 내부에서 코드의 실행 흐름
		// : 모든 프로세스에는 한 개 이상의 스레드가 존재하며 작업을 수행,
		// 2개 이상의 스레드를 가지는 프로세스 => 멀티스레드 프로세스

		// * 멀티 태스킹(Multi Tasking)
		// -> 2가지 이상의 작업을 동시에 처리하는 것
		// ex) 워드 작업 + 노래듣기
		// : 운영체제는 멀티 태스킹을 할 수 있도록
		// CPU 및 메모리 자원을 프로세스마다 적절히 할당해주고
		// 병렬로 실행시킴

		// * 멀티 태스킹을 구현하는 방법 (2가지)
		// 1. 멀티 프로세스
		// : 프로세스를 여러 개를 형성
		// -> 동시에 여러개의 작업을 진행하는 것
		// : 하나의 프로세스에서 오류가 발생해도 다른 프로세스에 영향을 끼치지 않음
		// => 워드와 엑셀을 동시에 사용 -> 워드가 오류 발생 -> 엑셀은 여전히 사용 가능

		// 2. 멀티 스레드
		// : 한 개의 프로그램을 실행해서 내부적으로 여러 작업을 동시에 실행하는 것
		// : 하나의 프로세스 내부에 생성되기 때문에 하나의 스레드가 예외를 발생시키면
		// 프로세스 자체가 종료될 수 있어서 다른 스레드에도 영향을 끼침
		// ex) 카톡 - 메신저 / 채팅기능 / 파일 전송
		// -> 채팅기능에 오류 발생 -> 프로세스 종료(메신저, 파일전송 기능에 영향을 끼침)

		// * 멀티 스레드를 사용하는 이유
		// - 멀티 프로세스 -> 서로 독립적
		// --> 작업공간이 독립적이고, 각각의 프로세스끼리 자원 및 데이터를 공유하기 어려움
		// ---> 프로세스간의 데이터 전송이 필요하다면 자원의 소유가 많은데에 비해
		// 하나의 프로그램 내의 스레드는 서로 독립적이지 않아서 작업공간을 같이 공유하여 사용
		// => 자원, 데이터를 쉽게 전송하고 사용하는 시간이 적게 듬

		// * 메인 스레드 와 작업 스레드
		// - 메인 스레드
		// : main()메소드의 첫 코드부터 아래로 순차적으로 실행하고
		// 마지막 코드까지 실행
		// : 자바의 모든 애플리케이션은 메인스레드가 main()메소드를 실행하면서 시작

		// - 작업 스레드
		// : 메인 작업 이외에 추가적으로 필요한 수 만큼 스레드를 생성
		// * 작업 스레드 생성 방법
		// 1. Thread 클래스로부터 직접생성
		// 2. Thread 클래스를 상속해서 하위 클래스를 만들어 생성

	}

}
