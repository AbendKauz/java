- 스레드(thread)
	- 프로세스 내부에서 코드의 실행 흐름
	-- 하나의 스레드는 하나의 코드 실행 흐름
	
	* 프로세스(process)
		- 실행중인 하나의 애플리케이션
		-- 애플리케이션이 실행되면 운영체제로부터 실행에 필요한 메모리를
			할당받아 코드를 실행함(멀티 프로세스 역시 가능)
	
	* 멀티 태스킹(multi tasking)
		- 두가지 이상의 작업을 동시에 처리하는 것
		* 멀티 프로세스(multi process)
			: 독립적으로 프로그램들을 실행하고 여러 작업을 처리
			(ex. ms word와 internet 동시 실행)
			-> 한 프로그램이 예외가 발생해도 다른 프로그램엔 영향이 없음
		* 멀티 스레드(multi thread)
			: 한개의 프로그램을 실행하고 내부적으로 여러 작업을 처리
			(ex. 카카오톡 -> 채팅, 파일전송 등)
			-> 한 스레드가 예외를 발생시킬 경우 프로세스 자체가 종료될 수 있음
	
	- 메인 스레드(main thread)
		- main() 메소드가 실행되면서 시작됨
			* main() 메소드의 첫 코드부터 아래로 순차적으로 실행
			-> main() 메소드의 마지막 코드를 실행하거나, return문을 만나면 실행종료
		- 필요에 따라 작업 스레드들을 만들어 병렬로 코드 실행 가능
			-> 멀티스레드를 생성해서 멀티 태스킹을 수행
		* 싱글 스레드 : 메인 스레드가 종료하면 프로세스도 종료됨
		* 멀티 스레드 : 실행중인 스레드가 하나라도 있으면 프로세스가 종료되지 않음
	
	
	- 작업 스레드
		- 멀티 스레드로 실행하는 애플리케이션을 개발하려면 몇개의 작업을 병렬로 실행할 지
			결정한 뒤 각 작업별로 스레드를 생성해야 함
		* 작업 스레드 생성 방법
			: 작업 스레드 역시 객체로 생성되므로 클래스가 필요
			
			1. Thread 클래스로부터 직접 생성
				- Runnable을 매개값으로 갖는 생성자 호출
			[기본형]
			Thread thread = new Thread(Runnable target);
				* Runnable은 인터페이스 타입이기 때문에 구현객체를 만들어 대입해야 함
				* Runnable에는 run()메소드 하나가 정의되어 있음
					: 구현 클래스는 run()을 재정의해서 작업 스레드가 실행할 코드를 작성해야 함
				* Runnable은 작업내용을 가지고 있는 객체 / 실제 스레드가 아님
				* Runnable 구현 객체를 생성한 후, 이것을 매개값으로 해서 Thread 생성자를 호출
					-> 작업 스레드가 생성 됨
				** 작업 스레드는 생성되는 즉시 실행되는 것이 아님
					=> start() 메소드를 호출하면 작업 스레드가 실행됨
			
			2. Thread 클래스를 상속하여 하위 클래스를 만들어 생성
				- Thread의 하위 클래스로 작업 스레드를 정의하면서 작업 내용을 포함
				
				* 작업 스레드 클래스 정의하는 법
					1. Thread 클래스를 상속한 후 run() 메소드를 재정의해서 스레드가 실행할 코드를 작성
						: 작업 스레드 클래스로부터 작업 스레드 객체를 생성하는 방법은
							일반적인 객체를 생성하는 방법과 동일
					2. 작업 스레드 객체 생성 후 start() 메소드를 호출하면 run()메소드가 실행됨
	
		* 스레드는 자신의 이름을 가짐
			: 디버깅 할 때 어떤 스레드가 어떤 작업을 하는지 조사할 목적으로 가끔 사용됨
		* 메인 스레드는 'main'이름을 가짐
		* 우리가 직접 생성한 스레드는 자동적으로 'Thread-n'이름으로 설정됨(n : 스레드의 번호)
			- setName()메소드로 이름 변경 가능
			- getName()메소드로 스레드 이름을 알 수 있음
		* currentThread()메소드로 현재 스레드의 참조를 얻을 수 있음
		[형식]
		Thread thread = Thread.currentThread();
	
	- 공유 객체를 사용할 때 주의할 점
		: 멀티 스레드 프로그램에서 스레드들이 객체 공유해서 작업해야 하는 경우,
			의도했던 것과 다른 결과가 나올 수 있음
	