package sec02.exam01;

public class D0901_스레드상태이론 {

	public static void main(String[] args) {

		// * 스레드는 new 연산자로 객체를 생성하고 종료가 될 때까지 여러 상태를 가짐

		// - 실행대기상태(runnable)
		// : 언제든지 실행할 준비가 되어있는 상태
		// : 스레드 객체를 생성하고 start() 메소드를 호출 -> 실행대기상태가 됨

		// - 실행 상태
		// : 실행대기상태에 있는 스레드중에서 운영체제가 하나를 선택하여 run() 메소드를 실행
		// : run() 메소드를 모두 실행하기 전에 다시 실행 대기 상태로 돌아갈 수도 있음

		// - 일시정지 상태
		// : 스레드가 실행할 수 없는 상태
		// : 일시정지 상태에서는 바로 실행상태로 돌아갈 수 없음 -> 실행대기상태로 돌아감

		// - 종료 상태
		// : 실행 상태에서 run()메소드가 종료되면 더이상 실행할 코드가 없음 -> 스레드 실행 정지

		// * 스레드 상태 제어
		// : 실행중인 스레드의 상태를 변경하는 것
		// => 스레드의 상태변화를 가져오는 메소드를 파악 (sleep(), interrupt())

		// * 스레드 안전하게 종료
		// 1. stop 플래그
		// : run()메소드가 끝나도록 유도해서 종료

		// 2. interrupt() 메소드 - 일시정지
		// : 스레드가 일시 정지 상태에 있을 때 InterruptedException 예외를 발생
		// -> 스레드를 종료(단점 : 스레드가 일시정지 되지 않으면 아무 효과없음)

		// 2-1. interrupt() 메소드 - interrupted(), isInterrupted()
		// : 굳이 일시정지 상태를 만들지 않고도 스레드를 안전하게 종료
		// interrupted() : 정적 메소드
		// isInterrupted() : 인스턴스 메소드

	}

}
