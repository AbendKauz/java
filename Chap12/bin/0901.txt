	- 동기화 메소드
		- 스레드가 사용중인 객체를 다른 스레드가 변경할 수 없게 하려면
			-> 스레드 작업이 끝날 때 까지 객체에 잠금을 걸어야 함
		* 임계영역(critical section)
			: 단 하나의 스레드만 실행할 수 있는 코드 영역
		* 동기화(synchronized) 메소드
			: 임계영역을 지정하기 위해 동기화 메소드를 제공함
			-> 스레드가 객체 내부의 동기화 메소드를 실행하면 즉시 객체에 잠금이 걸림
	[기본형]
	public synchronized void method(){
		임계영역;	// 단 하나의 스레드만 실행
	}
	
	* synchronized 키워드를 붙임
		: 인스턴스와 정적 메소드 어디든 붙일 수 있음
	
	- 동기화 메소드는 전체 내용이 임계 영역이므로
		스레드가 동기화 메소드를 실행하면 즉시 객체에는 잠금이 일어남
							실행종료 하면 잠금이 풀림
	
	* 만약 동기화 메소드가 여러 개 있을 경우, 스레드가 이들 중 하나를 실행할 때
		-> 다른 스레드는 해당 메소드는 물론이고 다른 동기화 메소드도 실행할 수 없음
					  일반 메소드는 실행 가능함
	
	
	- 스레드 제어
		- 스레드 객체를 생성하고 start()메소드를 호출하면
			실행 대기 상태가 됨
			* 실행 상태인 스레드는 run() 메소드를 모두 실행하기 전
				다시 실행 대기 상태로 돌아갈 수 있음
			* 실행대기상태에 있는 다른 스레드가 선택되어 실행 상태가 되기도 함
			* 실행 상태에서 run() 메소드의 내용이 모두 실행되면
				스레드 실행이 멈추고 종료 상태가 됨
	
		- 실행(running)상태
			- 실행 대기 상태의 스레드 중에서 운영체제가 하나를 선택하여
				CPU가 run()메소드를 실행하도록 함
			- run()메소드를 모두 실행하기 전에 다시 실행대기상태로 돌아갈 수 있음
	
		- 종료(terminated)상태
			- 실행상태에서 run()메소드가 종료되면 더 이상 실행할 코드가 없기 때문에
				스레드 실행이 정지됨
	
	- 스레드 상태 제어
		- 실행중인 스레드의 상태를 변경
		-- 스레드의 상태변화에 필요한 메소드를 정확히 파악해야 함
		
		* sleep(long millis)
			: 주어진 시간동안 일시정지
			
			- Thread 클래스의 정적 메소드 sleep() 사용
			- 매개값에는 밀리세컨드 단위로 시간을 주면 됨
			-- 일시정지 상태에서 주어진 시간이 되기 전에 interrupt() 메소드가 호출
				=> InterruptedException 발생(예외처리 필요)
	
		- 스레드를 종료시키는 4가지 방법
			1. stop() 메소드 : 스레드 즉시 종료
				-> deprecated(중요도가 떨어져 사용하지 않음)
				=> stop()메소드로 갑자기 종료하면 스레드가 사용중이던
					자원들이 불안전한 상태로 남겨짐
			2. stop 플래그
				: 스레드는 run()메소드가 끝나면 자동적으로 종료되므로,
					run()메소드가 종료되도록 유도
			3. interrupt() 메소드 - 일시정지
				: 스레드가 일시정지 상태에 있을 때 InterruptedException 예외를 발생시키는 메소드
				 -> 이 메소드를 이용하여 스레드를 정상적으로 종료시킴
				* 단점 -> 스레드가 일시정지 상태가 되지 않으면 interrupt() 메소드 호출은 의미없음
			4. interrupt() 메소드 - interrupted(), isInterrupted()
				: interrupt() 메소드 호출 -> true를 리턴하는 메소드
					(굳이 일시정지 상태를 만들지 않아도 됨)
				- interrupted()는 정적 메소드, isInterrupted()는 인스턴스 메소드
	
			- stop 플래그 : 스레드의 안전한 종료
				* 경우에 따라서는 실행중인 스레드를 즉시 종료할 필요가 있음
				* run()메소드가 끝나면 자동적으로 종료됨 -> run()메소드가 정상적으로 종료되도록 유도
	
			- interrupt() 메소드 - 일시정지
				* 스레드가 일시정지 상태에 있을 때 InterruptedException 예외를 발생시키는 역할
				- 스레드가 실행대기 또는 실행상태에 있을때 interrupt() 메소드가 실행되면
					-> 즉시 InterruptedException이 발생하지는 않음
					: 스레드가 미래에 일시정지 상태가 되면 그 때 InterruptedException이 발생함
					== 스레드가 일시정지 상태가 되지 않으면 interrupt() 메소드 호출은 아무 의미 없음
