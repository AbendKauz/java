- 인터페이스(interface)
	- 객체의 사용 방법을 정의한 타입(코드와 객체가 서로 통신하는 접점 역할)
	-- 인터페이스를 통해 다양한 객체를 동일한 사용 방법으로 이용할 수 있다
	-- 인터페이스를 이용해서 다형성을 구현할 수 있다.
	
	- 개발코드는 인터페이스를 통해서 객체와 서로 통신함
	- 인터페이스의 메소드를 호출하면 객체의 메소드가 호출됨
	- 개발코드를 수정하지 않으면서 객체 교환이 가능함
	
	- 인터페이스 선언
		- .java형태의 소스파일로 작성 및 컴파일러를 통해 ~class형태로 컴파일됨
		- 클래스와 물리적인 파일형태는 같으나 소스작성내용이 다름
	[기본형]
	[public] interface 인터페이스이름{...}
	
		-- 인터페이스는 객체로 생성할 수 없으므로 생성자를 가질 수 없다.
	[기본형]
	interface 인터페이스이름{
		// 상수
		타입 상수이름 = 값;
		//추상 메소드
		타입 메소드이름(매개변수,...);
	}
	
	- 상수필드(constant field) 선언
		- 데이터를 저장할 인스턴스 혹은 정적필드 선언 불가
		- 상수필드만 선언 가능
			-> public static final을 생략하더라도 컴파일과정에서 자동으로 붙음
	[기본형]
	[public static final] 타입 상수이름 = 값;
		* 상수 이름은 대문자로 작성하되 서로 다른 단어로 구성되어 있을경우 언더바로 연결
		* 인터페이스 상수는 반드시 선언과 동시에 초기값을 지정해야 함
		
	- 추상메소드 선언
		- 인터페이스를 통해 호출된 메소드는 최종적으로 객체에서 실행
		- 인터페이스의 메소드는 실행블록'{}'이 필요없는 추상메소드로 선언
	[기본형]
	[public abstract] 리턴타입 메소드이름(매개변수, ...);
		* 추상메소드는 객체에서 재정의 해야함
