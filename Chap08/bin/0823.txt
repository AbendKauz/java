- 타입 변환과 다형성
	- 인터페이스도 메소드 재정의와 타입변환이 되므로 다형성을 구현할 수 있다.
	
	- 자동 타입 변환(promotion)
		- 프로그램 실행 도중에 자동적으로 타입 변환이 일어나는 것
		-- 구현 객체와 자식 객체는 인터페이스 타입으로 자동 타입 변환이 된다.
[기본형]
인터페이스 변수 = 구현객체;
          └───┬───┘
         자동 타입 변환
	
	- 매개변수의 다형성
		- 매개변수를 인터페이스 타입으로 선언하고 호출할 때에는 구현 객체를 대입
		
		ex)
		public interface Vehicle {
			public void run();
		}
		
		public class Driver {
			public void drive(Vehicle vehicle){	// vehicle : 구현객체
				vehicle.run();	// 구현객체의 run()메소드가 실행됨
			}
		}
		
		Driver driver = new Driver();
		Bus bus = new Bus();
		driver.drive(bus);
                      ↑
		// 자동타입변환 발생
		(Vehicle vehicle = bus;)
	
	
	- 강제 타입 변환(casting)
		- 구현 객체가 인터페이스 타입으로 자동 변환된 경우
			인터페이스에 선언된 메소드만 사용 가능
		- 구현 클래스에만 선언된 필드나 메소드를 사용할 경우 강제 타입 변환
	[기본형]
	구현클래스 변수 = (구현클래스) 인터페이스 변수;
         	 └────────┬────────┘
          		  강제타입변환

		ex)
		interface Vehicle{
			void run();
		}
		
		class Bus implements Vehicle {
			void run(){...};
			void checkFare(){...};
		}
	
		Vehicle vehicle = new Bus();
		vehicle.run();			// 가능
		// vehicle.checkFare();	// 불가능
		
		Bus bus = (Bus) vehicle;	// 강제타입변환
		
		bus.run();			// 가능
		bus.checkFare();	// 가능
	
	- 객체 타입 확인 instanceof
		- 구현객체가 변환되어 있는지 알 수 없는 상태에서 강제 타입 변환할 경우 ClassCastException 발생
		-- instanceof 연산자로 확인 후 안전하게 강제 타입 변환
	ex)
	public class Driver {
		public void drive(Vehicle vehicle){
			if(vehicle instanceof Bus){		// vehicle 매개변수가 참조하는 객체가 Bus인지 조사
				Bus bus = (Bus) vehicle;	// Bus객체일 경우 안전하게 강제 타입 변환
				bus.checkFare();	// Bus타입으로 강제 타입 변환을 하는 이유
			}
			vehicle.run();
		}
	}
	
	