package sec02.exam01;

public class D0823_인터페이스의다형성 {

	public static void main(String[] args) {

		// * 다형성을 구현하기 위해서는?
		// -> 메소드 재정의 + 타입변환이 필요

		// 인터페이스 역시 2가지 기능이 제공이 되고, 다형성을 구현하는데 많이 사용함

		// - 상속 : 같은 종류의 하위 클래스를 만드는 기술
		// - 인터페이스 : 사용 방법이 동일한 클래스를 만드는 기술

		// * 인터페이스의 다형성
		// : 인터페이스를 사용해서 메소드를 호출한다면 -> 구현 객체를 매우 손쉽게 교체 가능
		// => 프로그램의 소스코드는 변함이 없는데, 구현객체를 교체함으로써
		// 프로그램의 실행결과가 다양해짐

		// * 인터페이스의 자동 타입 변환
		// -> 구현 객체와 구현 객체의 자식객체까지 인터페이스 타입으로 자동 타입 변환 가능
		// => 자식 객체는 부모인 구현객체가 인터페이스 내용을 구현하고 있기 때문에
		// 자식 객체도 그 내용을 그대로 물려받아서 자동 타입 변환이 가능함

		// 인터페이스 변수 = 구현객체;

		// 즉, 상속 관계에서 부모가 어떤 인터페이스를 구현하고 있다면
		// -> 그 자식객체도 그 인터페이스에 대입이 가능

		// 자동 타입 변환을 이용해서 다형성을 구현할 수 있다
		// -> 필드의 다형성, 매개변수의 다형성을 구현할 수 있다

	}

}
