package sec01.exam01;

public class D0819_인터페이스이론 {

	public static void main(String[] args) {

		// * 인터페이스???
		// : 객체의 사용 방법을 정의한 타입 -> 객체 사용 설명서
		// : 인터페이스를 통해 다양한 객체를 동일한 사용 방법으로 이용가능
		// -> 다형성을 인터페이스를 이용해서 구현이 가능

		// : 개발코드랑 객체 사이에 있다.
		// -> 개발코드는 인터페이스를 통해서 객체와 서로 통신을 함.
		// : 개발코드가 인터페이스의 메소드를 호출하면 -> 인터페이스 뒤에 있는 객체의 메소드가 호출
		// -> 개발 코드를 수정하지 않으면서 객체 교환이 가능함
		// 인터페이스 안의 메소드는 내용이 없다.

		// * 여기서 직접 객체의 메소드를 호출하면 되는데 왜 중간에 인터페이스를 두는가???
		// -> 개발코드를 수정하지 않으면서 객체교환이 가능하기 때문
		// : 인터페이스는 하나의 객체가 아니라 여러 객체들과 사용이 가능함
		// 어떤 객체를 사용하느냐에 따라 실행 내용과 리턴값이 달라질 수 있음
		// => 따라서 코드변경 없이 실행내용과 리턴값을 다양화할 수 있다는 장점

		// * 인터페이스 선언(객체 사용 설명서)
		// -> .java형태의 소스파일로 작성 -> 컴파일 과정에서 컴파일러를 통해 .class형태로 됨
		// => 물리적인 파일 형태는 클래스와 동일하지만, 소스를 작성할 때 선언방법이 다름

		// [public] interface 인터페이스명{ ... }
		// => 인터페이스 선언은 class 키워드를 쓰지않음 / interface 키워드 사용
		// 이름작성규칙 (대소문자 구분, 첫글자는 대문자 - 나머지는 소문자)

		// * 인터페이스의 구성멤버
		// : 상수와 추상메소드만을 가짐
		// - 클래스는 필드, 생성자, 메소드를 가짐
		// : 인터페이스는 객체를 만들 목적으로 작성하는 것이 아니므로
		// -> 객체를 만들 때 필요한 생성자를 가질 수 없다.
		// : 자바 8부터는 상수, 추상메소드 외에 더 추가적인 멤버들이 생김
		// -> 하지만 일반적으로는 인터페이스에 상수, 추상메소드만 선언해서 사용함

	}

}
