package sec03;

public class D0727_생성자 {

	public static void main(String[] args) {

		// 생성자와 메소드의 차이는 
		// 생성자는 리턴타입이 없다는 점임.
		
		// 객체 생성시 초기화 역할을 담당한다.
		// 필드를 어떤 값으로 초기화하거나, 메소드를 호출해서 객체를 사용할 준비를 하는 것.
		
		// 생성자가 성공적으로 실행되면, 힙 영역에 객체가 먼저 생성되고 객체 번지가 리턴됨.
		// 리턴 된 객체의 번지는 클래스 변수에 저장됨.
		
		// 기본 생성자 (default constructor)
		// 모든 클래스는 생성자가 반드시 존재하며, 생성자를 하나 이상 가질 수 있음.
		// 클래스 내부에 생성자 선언이 생략할 경우, 바이트 코드에 자동 추가됨.
		// 클래스에 생성자 선언하지 않아도, new 생성자()로 객체 생성 가능.
		// 생성자를 1개라도 생성했다면, 컴파일러는 기본생성자를 추가하지 않음.
		
		// 생성자 선언
		// 생성자는 하나 이상 선언되어야 함. (선언을 하지 않으면 컴파일러가 자동으로 기본 생성자를 정의함)
		// 메소드와 비슷한 모양을 가지고 있으나, 리턴 타입이 없고 클래스 이름과 동일함.
		// 객체 초기화 코드 : 필드에 초기값을 저장하거나 메소드를 호출 -> 객체 사용 전 필요한 준비를 함
		// 클래스에 생성자가 명시적으로 선언되었을 경우 반드시 선언된 생성자 호출하여 객체 생성

		// public class로 선언이 되면, 기본 생성자에도 public이 붙음
		// public 없이 class로만 선언되면, 기본생성자에도 public이 붙지 않음
		
		// *우리가 필요에 따라서 생성자를 직접 선언해서 사용해야 하는 경우가 있음
		// -> 다양한 값을 가진 객체를 생성하기 위해서 생성자를 만듬
		// -> 컴파일러가 기본 생성자를 자동으로 추가하지 않음
					
//		Car myCar = new Car("검정", 3000);
//		Car(String color, int i ){
//		}; Car클래스에다 이걸 만들어놔야 함
	
//		Car myCar2 = new Car();
		// 이건 호출 불가. 스트링 타입과 인트타입의 값을 넣어야 호출 가능.

		
	}
}		
	
